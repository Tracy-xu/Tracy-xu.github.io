<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>npm 私仓</title>
      <link href="/2019/07/01/Sinopia/"/>
      <url>/2019/07/01/Sinopia/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>npm 私仓可用于提高包的下载速度和保护内部代码，常见的 npm 私仓技术方案有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* npm on-site。缺点是收费，而且 npm 在国内访问慢</span><br><span class="line">* Git + SSH 直接引用到 GitHub 项目地址。缺点是不能更新（npm update），不能使用 Semver（语义化版本规范），而且 URL 不美观</span><br><span class="line">* cnpm</span><br><span class="line">* Sinopia/Verdaccio</span><br><span class="line">* Nexus</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Sinopia-Verdaccio"><a href="#Sinopia-Verdaccio" class="headerlink" title="Sinopia/Verdaccio"></a>Sinopia/Verdaccio</h2><p>Sinopia 是一个零配置的私有的带缓存功能的 npm 包管理工具。使用 Sinopia，不用安装 CouchDB 或 MYSQL 之类的数据库，Sinopia 有自己的迷你数据库，如果要下载的包不存在，它将自动去你配置的 npm 地址上去下载，而且硬盘中只缓存你现在过的包，以节省空间。</p><p>Sinopia 特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 不同步拉取 npm 库，占据大量硬盘，没有硬盘被撑爆的问题</span><br><span class="line">* 安装配置极其简单，不需要数据库</span><br><span class="line">* 支持配置上游 Registry 配置，一次拉取即缓存</span><br><span class="line">* 支持 Forever 及 Pm2 守护进程管理</span><br></pre></td></tr></table></figure><p>注意：由于 Sinopia 已经没人维护了，推荐使用 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>，Verdaccio 是 Sinopia 的 Fork，安装配置基本和 Sinopia 一致。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 Sinopia 前，首先要确保已经安装 Node，Linux 下安装 Node 参考具体章节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sinopia -g</span><br></pre></td></tr></table></figure><p>Sinopia 目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 程序安装目录（全局安装目录在不同配置下会不一样）</span><br><span class="line">|-- /usr/sbin/nodejs/lib/node_modules/sinopia/</span><br><span class="line"></span><br><span class="line"># 配置和存储目录</span><br><span class="line">|-- /root/.config/sinopia/</span><br><span class="line">    |-- config.yaml  # 配置文件</span><br><span class="line">    |-- htpasswd     # 用户和密码信息</span><br><span class="line">    |-- storage      # 包存储位置（除了 publish 的私包，通过 npm install xx 安装的公共包也会缓存到这个目录，安装过的包再次安装时会直接从这个目录取）</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sinopia</span><br></pre></td></tr></table></figure><p>启动成功后，会有下面两行提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warn  --- config file  - /root/.config/sinopia/config.yaml</span><br><span class="line">warn  --- http address - http://0.0.0.0:4873/</span><br></pre></td></tr></table></figure><p>上面一行是 Sinopia 的配置文件所在路径，下面一行是 Sinopia 服务的域名和端口号。然后打开 <code>http://localhost:4873</code>（可通过 curl），如果能正常访问，说明安装成功。</p><ul><li>网络访问</li></ul><p>默认情况下只能本机 <code>localhost:4873</code> 访问，如果想通过 IP 让其他机器也能访问到，需要在 <code>/root/.config/sinopia/config.yaml</code> 最后一行添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen: 0.0.0.0:4873</span><br></pre></td></tr></table></figure><p>好了，再试一次 <code>192.168.10.14:4873</code>，成功访问。如果还不行，可能是防火墙导致，默认情况下防火墙没有开放 4873 端口，需要开放相应的端口。CentOS 6 和 CentOS 7 不一样，以 CentOS 6 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 进入编辑防火墙配置文件（修改 OUTPUT ACCEPT 下的内容）</span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"># 然后加上下面这句（作用是防止防火墙占用80端口）</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># 再加上下面这一句（开放 4873 端口）</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 4873 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># 最后记得重启一下防火墙</span><br><span class="line">/etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><ul><li>PM2 做守护进程</li></ul><p>Node 服务非常脆弱，一般在实际中使用都会配合守护进程。这里选用 PM2 做守护进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 PM2</span><br><span class="line">npm install -g pm2</span><br><span class="line"></span><br><span class="line"># 通过 PM2 启动 Sinopia</span><br><span class="line">pm2 start `which sinopia`</span><br></pre></td></tr></table></figure><p>注：更多 PM2 操作指南参考相关文档。另外，如果想要结束 PM2 守护的 Sinopia 进程，可使用以下方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop sinopia    # 参数也可以是具体的 PM2 id（不是 pid），比如 pm2 stop 0</span><br></pre></td></tr></table></figure><p>也可以手动结束，操作步骤如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有进程</span><br><span class="line">ps -A</span><br><span class="line"></span><br><span class="line"># 查询结果如下</span><br><span class="line">3239 ?         00:00:31 watch</span><br><span class="line">6035 ?         00:00:11 PM2 v2.10.3: Go</span><br><span class="line">27690 ?        00:00:01 sinopia</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 杀掉 watch 和 sinopia 这两个进程</span><br><span class="line">kill 3239</span><br><span class="line">kill 27690</span><br></pre></td></tr></table></figure><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># This is the default config file. It allows all users to do anything,</span><br><span class="line"># so don&apos;t use it on production systems.</span><br><span class="line">#</span><br><span class="line"># Look here for more config file examples:</span><br><span class="line"># https://github.com/rlidwka/sinopia/tree/master/conf</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># path to a directory with all packages</span><br><span class="line">storage: ./storage                     # npm 包存放的路径（可以将将此目录指向其他目录）</span><br><span class="line"></span><br><span class="line">auth:</span><br><span class="line">  htpasswd:</span><br><span class="line">    file: ./htpasswd                   # 用于存储 npm 用户的账号和密码信息</span><br><span class="line">    # Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br><span class="line">    # You can set this to -1 to disable registration.</span><br><span class="line">    #max_users: 1000                   # 最大允许的用户数量，默认值为 1000，-1 则为禁止注册</span><br><span class="line"></span><br><span class="line"># a list of other known repositories we can talk to</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: https://registry.npmjs.org/   # 上游源，默认为 npm 的官网，可以使用淘宝的 npm 镜像地址</span><br><span class="line"></span><br><span class="line">packages:                              # 配置权限管理</span><br><span class="line">  &apos;@*/*&apos;:</span><br><span class="line">    # scoped packages</span><br><span class="line">    access: $all                       # 表示哪一类用户可以对匹配的项目进行安装。$all 所有人，$authenticated 通过验证的人，$anonymous 匿名者</span><br><span class="line">    publish: $authenticated            # 表示哪一类用户可以对匹配的项目进行发布</span><br><span class="line">    proxy: npmjs                       # 默认没有这项</span><br><span class="line">    </span><br><span class="line">  &apos;*&apos;:</span><br><span class="line">    # allow all users (including non-authenticated users) to read and</span><br><span class="line">    # publish all packages</span><br><span class="line">    #</span><br><span class="line">    # you can specify usernames/groupnames (depending on your auth plugin)</span><br><span class="line">    # and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br><span class="line">    access: $all                       # 表示哪一类用户可以对匹配的项目进行安装</span><br><span class="line"></span><br><span class="line">    # allow all known users to publish packages</span><br><span class="line">    # (anyone can register by default, remember?)</span><br><span class="line">    publish: $authenticated            # 表示哪一类用户可以对匹配的项目进行发布</span><br><span class="line"></span><br><span class="line">    # if package is not available locally, proxy requests to &apos;npmjs&apos; registry</span><br><span class="line">    proxy: npmjs                       # 如其名，这里的值是对应于 uplinks</span><br><span class="line"></span><br><span class="line"># log settings</span><br><span class="line">logs:</span><br><span class="line">  - &#123;type: stdout, format: pretty, level: http&#125;</span><br><span class="line">  #- &#123;type: file, path: sinopia.log, level: info&#125;</span><br><span class="line"></span><br><span class="line">listen: 0.0.0.0:4873                   # 默认没有这项，只能在本机访问，添加后可以通过外网访问</span><br></pre></td></tr></table></figure><p>部分配置字段意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">storage    # 仓库保存的路径</span><br><span class="line">auth       # 验证相关</span><br><span class="line">uplinks    # 配置上游的 npm 服务器，主要是用于请求的仓库不存在时去上游服务器拉取</span><br><span class="line">packages   # 配置模块/包的发布(publish)、下载(access)的权限等</span><br><span class="line">listen     # 配置监听端口与主机名</span><br></pre></td></tr></table></figure><ul><li>auth 配置</li></ul><p>max_users: -1 表示我们将最大用户数设置为－1，表示禁用 npm adduser 命令来创建用户，不过我们仍然可以通过当前目录下的 htpasswd 文件来初始化用户。</p><p>示例：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yorkie:&#123;SHA&#125;?????????????????=:autocreated 2016-02-05T15:33:46.238Z</span><br><span class="line">weflex:&#123;SHA&#125;????????????????=:autocreated 2016-02-05T15:39:19.960Z</span><br><span class="line">james:&#123;SHA&#125;????????????????=:autocreated 2016-02-05T17:59:05.041Z</span><br></pre></td></tr></table></figure><p></p><p>上面的加密算法也很简单，就是简单的 SHA1 哈稀之后再转换成 Base64 输出就好，后面跟着的只是表示时间。</p><ul><li>packages 配置</li></ul><p>配置大致分为两个部分，一个是以 <code>@*/*</code> 为开头的，另一个则是通配符 <code>*</code>。</p><p>这个当然就是对 package.json 中的 name 字段进行匹配，比如 @<a href="mailto:webassemblyjs/ast@1.3.1" target="_blank" rel="noopener">webassemblyjs/ast@1.3.1</a> 将匹配第一个配置，而 express 则匹配第二个。这里这么配置的意义在于：一般团队或者公司的私有项目，会采用不同的权限控制，于是这里借用了 npm 的 scoped name 即 @company 的形式，例如 @weflex/app 即表示 WeFlex 下属的 app 项目了。</p><p>接下来，每一个命名过滤器（filter）下都有三项基本设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">access    # 表示哪一类用户可以对匹配的项目进行安装(install)</span><br><span class="line">publish   # 表示哪一类用户可以对匹配的项目进行发布(publish)</span><br><span class="line">proxy     # 如其名，这里的值是对应于 uplinks 的</span><br></pre></td></tr></table></figure><p>对于 1 和 2 的值，我们通常有以下一些可选的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$all            # 表示所有人都可以执行对应的操作</span><br><span class="line">$authenticated  # 表示只有通过验证的人可以执行对应操作</span><br><span class="line">$anonymous      # 表示只有匿名者可以进行对应操作（通常无用）</span><br></pre></td></tr></table></figure><p>或者也可以指定对应于之前我们配置的用户表 htpasswd 中的一个或多个用户，这样就明确地指定哪些用户可以执行匹配的操作。</p><ul><li>为 packages 中 <code>@*/*</code> 字段配置代理源</li></ul><p><code>&#39;@*/*&#39;</code> 下添加 <code>proxy: npmjs</code> 配置，给 scoped packages（<a href="https://docs.npmjs.com/misc/scope" target="_blank" rel="noopener">npm 官方的定义</a>） 添加代理源，使得能够安装 scoped packages 类型的包（比如 @<a href="mailto:webassemblyjs/ast@1.3.1" target="_blank" rel="noopener">webassemblyjs/ast@1.3.1</a>）。如果不配置此项，安装基本的包没有问题，但是，安装 scoped packages 包时，比如 webpack，会提示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack</span><br><span class="line"></span><br><span class="line"># 出现以下错误</span><br><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found: @webassemblyjs/ast@1.3.1</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     C:\Users\Administrator\AppData\Roaming\npm-cache\_logs\2018-05-09T06_26_23_190Z-debug.log</span><br></pre></td></tr></table></figure><p>这是在安装 @<a href="mailto:webassemblyjs/ast@1.3.1" target="_blank" rel="noopener">webassemblyjs/ast@1.3.1</a> 这个包时出的问题，sinopia 会提示 404。上面安装的包就是这类的包，常见的有 @angular @type 等。修改配置和代码后，重启 sinopia，这时再次安装就会提示成功。</p><p>如果还不成功，可能就是老版本 sinopia 的 bug 导致的（我这版中没出息这个问题），sinopia 每次向 npmjs 请求安装某个包时，请求地址都是转码后再向 npm 请求的，所以会将 @ 转码为 %40，但是 npm 不能识别 %40，所以导致 404 的错误。</p><p>这个时候只需要修改 sinopia 中的转码的地方就可以了。转码的文件是 up-storage.js,，修改 up-storage.js 中的 encode 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var encode = function (url) &#123;</span><br><span class="line">  return encodeURIComponent(url).replace(/^%40/, &apos;@&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h3><p>通过服务器来新建用户。服务器上将 registry 改为 <a href="http://localhost:4873：" target="_blank" rel="noopener">http://localhost:4873：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set registry http://localhost:4873</span><br></pre></td></tr></table></figure><p>然后添加用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm adduser --registry http://localhost:4873</span><br><span class="line"></span><br><span class="line"># 填写如下信息</span><br><span class="line">user: admin</span><br><span class="line">password: admin</span><br><span class="line">email: admin@admin.com</span><br></pre></td></tr></table></figure><p>这时 htpasswd(config.yaml 同目录) 文件下会生成相应的信息。</p><h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set registry http://192.168.10.14:4873        # 设置 npm 源</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm adduser --registry http://192.168.10.14:4873  # 添加用户。如果不发布 npm 包，是不需要注册和登录的，登录 npm 是为了发布包</span><br><span class="line">npm login                                         # 登录 npm。注，npm adduser 成功的后默认就登陆了，所以不需要再 npm login</span><br><span class="line">npm whoami                                        # 检测身份</span><br></pre></td></tr></table></figure><p>注：推荐用 nrm 来管理 npm 源。具体的 nrm 操作查看 node 的 npm 相关章节。</p><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx              # 选项有 --save (-S)、--save-dev (-D)、-g</span><br></pre></td></tr></table></figure><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><p>切换到私有仓库，登录成功之后，就可以执行 npm publish 发布到这个私有 npm 上面啦，发布包的操作跟 npm 官方发布包无差别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm login                    # 登录 npm</span><br><span class="line">npm publish                  # 发包</span><br><span class="line">npm unpublish --force test   # 撤销发布。撤销 test 这个包，如果是在当前包的根目录下操作，可以省略包名</span><br></pre></td></tr></table></figure><p>发布包注意事项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 包的名称和版本就是你项目里 package.json 里的 name 和 version，author 字段可以显示包的作者，为空则表示匿名</span><br><span class="line">* 不能和已有的包的名字重名，发布前可通过 npm 的查找是否已存在相同名称的包（npm search xxx）</span><br><span class="line">* npm 对包名的限制：不能有大写字母/空格/下滑线（testPublish、test_publish 都会又报错）</span><br></pre></td></tr></table></figure><h2 id="使用-Docker-安装-Verdaccio"><a href="#使用-Docker-安装-Verdaccio" class="headerlink" title="使用 Docker 安装 Verdaccio"></a>使用 Docker 安装 Verdaccio</h2><p>参考 Docker 安装 Verdaccio <a href="https://verdaccio.org/docs/en/docker.html" target="_blank" rel="noopener">文档</a>。</p><h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull verdaccio/verdaccio    # 拉取 Verdaccio 的 Docker Image，不指定版本下，拉取的是 latest</span><br></pre></td></tr></table></figure><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><ul><li>新建宿主机目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在宿主机上新建需要挂载到的目录（路径可自选）</span><br><span class="line">mkdir /home/kpg/verdaccio</span><br><span class="line">mkdir /home/kpg/verdaccio/conf</span><br><span class="line">mkdir /home/kpg/verdaccio/storage</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拉取配置文件 config.yaml</span><br><span class="line">cd /home/kpg/verdaccio/conf</span><br><span class="line">git clone https://github.com/verdaccio/docker-examples</span><br><span class="line">mv docker-examples/docker-local-storage-volume/conf/config.yaml config.yaml</span><br><span class="line">rm -rf docker-examples    # config.yaml 复制好后，删除这个目录</span><br></pre></td></tr></table></figure><p>注：如果没有将 config.yaml 配置文件放在 <code>/home/kpg/verdaccio/conf/</code> 目录下，会导致浏览器将访问不了，<code>docker run</code> 看不出错误，只有通过 <code>docker logs</code> 查找日志，才能发现问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps                # 找到 verdaccio container id</span><br><span class="line">docker logs containerId  # 查找日志</span><br></pre></td></tr></table></figure><ul><li>设置宿主机目录权限</li></ul><p><code>mkdir verdaccio</code> 创建的目录属主是当前宿主机用户，而每个 docker container 都会运行在自建的用户上。所以要注意挂载目录的权限，要不然 <code>npm adduser</code> 和 <code>npm install</code> 无法写入，提示 500 服务器错误，查看容器日志会有下面这样的提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs --tail 20 verdaccio</span><br><span class="line">EACCES: permission denied, open &apos;/verdaccio/conf/htpasswd&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it verdaccio sh    # 进入容器查找容器的用户 ID（进入后 Shell 前缀变成了 ~）。直接在宿主机里面 cat /etc/passwd 查找不到</span><br><span class="line">whoami                          # 查看当前用户</span><br><span class="line">cat /etc/passwd                 # 找到当前用户的 User ID (10001) 和 Group ID (65533)。docker 容器中的 uid 和 gid 和宿主机是共享的，只是没有具体名称</span><br><span class="line">exit                            # 退出容器</span><br><span class="line">chown -R 10001:65533 verdaccio  # 在宿主机下设置目录权限。-R 表示递归设置</span><br></pre></td></tr></table></figure><ul><li>挂载宿主机目录</li></ul><p>可以在启动时通过 <code>-v</code> 将宿主机目录挂载到容器内目录，也可以通过 docker-compose.yml 来配置 volumes。</p><ul><li>配置 config.yaml</li></ul><p>基本配置参考上面，storage、htpasswd 要指向容器内目录，uplinks 可以使用淘宝 npm 私仓：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">storage: /verdaccio/storage</span><br><span class="line">auth:</span><br><span class="line">  htpasswd:</span><br><span class="line">    file: /verdaccio/conf/htpasswd</span><br><span class="line">uplinks:</span><br><span class="line">  npmjs:</span><br><span class="line">    url: https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p>如果将启动参数放在命令中，做成脚本文件来启动会更加方便（如果用 docker-compose 启动，将参数放在 docker-compose.yml 中也很方便）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name verdaccio \</span><br><span class="line">--restart always \</span><br><span class="line">-p 4873:4873 \</span><br><span class="line">-v /home/kpg/verdaccio/conf:/verdaccio/conf \</span><br><span class="line">-v /home/kpg/verdaccio/storage:/verdaccio/storage \</span><br><span class="line">-v /home/kpg/verdaccio/plugins:/verdaccio/plugins \</span><br><span class="line">verdaccio/verdaccio</span><br></pre></td></tr></table></figure><p><code>-v</code> 用于挂载宿主机的一个目录，<code>:</code> 前面的目录是宿主机目录，后面的目录是容器内目录。</p><ul><li>一个错误</li></ul><p><code>npm publish</code> 时出现了一个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">npm ERR! code E503</span><br><span class="line">npm ERR! 503 Service Unavailable - PUT http://npm.kpg123.com/sdf - one of the uplinks is down, refuse to publish</span><br></pre></td></tr></table></figure><p>查看 <a href="https://github.com/verdaccio/verdaccio/issues/78" target="_blank" rel="noopener">Issues</a> 和<a href="https://verdaccio.org/docs/en/configuration.html#offline-publish" target="_blank" rel="noopener">配置文档</a>发现，By default verdaccio does not allow to publish when the client is offline, that behavior can be overridden by setting this to true.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">publish:</span><br><span class="line">  allow_offline: true</span><br></pre></td></tr></table></figure><h3 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><p>如果 nginx 直接安装在宿主机，直接 <code>/etc/nginx/conf.d</code> 下新建 nginx.conf 文件，填入以下内容即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream npm &#123;</span><br><span class="line">    server 127.0.0.1:4873;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name npm.kpg123.com;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://npm;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改客户端 host，然后就可以通过域名访问了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.101 npm.kpg123.com</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Flow</title>
      <link href="/2019/04/25/Git-Flow/"/>
      <url>/2019/04/25/Git-Flow/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>Git 工作流（Work Flow）是一种代码管理方案（版本管理、分支管理…）。在开发人员较少，项目不复杂时，可以采用简单的工作流，比如，只有一个 Master 分支，但当项目庞大，迭代周期长，开发人员多时，就需要更加严格的 Work Flow 了。在 Git 中常见的工作流有 Git Flow、GitHub Flow、GitLab Flow。一个完整的 Git Work Flow 应该满足以下需求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 多人协作和多功能并行的开发、测试、发布、热修复 -- 分支管理（develop、feature、release）</span><br><span class="line">* 版本追溯 -- 标签管理（tag）</span><br></pre></td></tr></table></figure><a id="more"></a><p>2010 年 5 月，Vincent Driessen 在 “<a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a>” 中介绍了一种构建在 Git 之上的软件开发模型。通过利用 Git 创建和管理分支的能力，为每个分支设定具有特定的含义名称，并将软件生命周期中的各类活动归并到不同的分支上，实现了软件开发过程不同阶段的相互隔离。这种软件开发的活动模型被 Vincent 称为 “Git Flow”。</p><h2 id="Git-Flow-基本流程"><a href="#Git-Flow-基本流程" class="headerlink" title="Git Flow 基本流程"></a>Git Flow 基本流程</h2><p><img src="/images/project/git/git-flow.jpg" alt="Git Flow 流程图"></p><p>从 Git Flow 流程图可以看出，Git Flow 的核心是 Branch，通过在项目的不同阶段对 Branch 的不同操作（create、merge、rebase…）来实现一个完整的高效率的工作流程。Git Flow Branches 主要分为两大类，Main Branchs（主分支） 和 Supporting Branches（辅助分支），其中 Main Branchs 包含了 Master 和 Develop，而 Supporting Branches 包含了 Feature、Release、Hotfix 以及其他自定义分支。Main Branchs 是长期分支，存活在项目的整个生命周期中，而 Supporting branches 分支是短期分支，短期分支合并后需要删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* master -- 主分支</span><br><span class="line">* develop -- 开发分支</span><br><span class="line">* feature/* -- 功能分支</span><br><span class="line">* release/* -- 预发布分支</span><br><span class="line">* hotfix/* -- 热修复分支</span><br></pre></td></tr></table></figure><p>在实践中，需求的创建、提测、发布应由项目负责人完成，普通的开发人员只需要开发功能和改 Bug。也就是说，对于 Master、Develop 这两个公共分支，只有项目负责人有操作权限，普通开发人员只有 Feature、Release、Hotfix 三个辅助分支的操作权限，这样既保证了 Master 和 Develop 的整洁，而且普通开发人员也不需掌握 Git Flow。</p><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>主分支用于发布，存放的是最稳定的正式版本。禁止在此分支上修改代码，只接受其他分支合并（Release、Hotfix）。另外，不管是用来发布 Release 还是 Hotfix，都需要打 Tag。</p><p>注：初始化时，可使用 <code>--allow-empty</code> 参数来 commit 一个空分支（<code>git flow init</code> 就是如此），<code>git commit --allow-empty -m &quot;initial commit&quot;</code>。</p><h3 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h3><p>开发分支用于日常开发，是 Feature 和 Release 分支的基础分支，存放最新的开发版（隔夜版 Nightly，是要发布到下一个 Release 的代码）。这个分支可能包含一定的 Bug（Release 还未合并的情况下），但不影响创建新的 Feature 进行新功能的开发（但是需要注意的是，假如 feature/b 基于 feature/a 的 Develop 创建，这时候的 feature/b 不能比 feature/a 早发布，如果想早发布只能将这个 feature/b 当作一个 Hotfix 了）。</p><p>跟 Master 一样，Develop 的变动也只能是合并（Feature、Release），不能是直接修改。</p><h3 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h3><p>功能分支用于开发新功能、代码重构、优化…，基于 Develop 创建，一般命名为 feature/xxx。新功能开发完成，会合并回 Develop 分支进入下一个 Release。</p><p>Feature 分支命名规则是，分支类型/分支发布时间-分支功能。比如：feature/20170401-fairy-flower，时间使用年月日命名，不足 2 位补 0。</p><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><p>预发布分支用于预发布（测试和测试阶段的 Bug 修复）。当需要发布一个新 Release 时，可以基于 Develop 分支创建一个 Release 分支，一般命名为 release/v1.0.0（关于版本号的命名规则参考相关章节），完成 Release 后，需要合并到 Master 和 Develop。</p><p>版本就是在这个阶段确定的，所以这个分支的命名会加版本后缀。版本正式发布前可生成 Changelog 文档，然后再发布上线。</p><h3 id="Hotfix"><a href="#Hotfix" class="headerlink" title="Hotfix"></a>Hotfix</h3><p>热修复分支，用于修改线上 Bug（比如回归时的 Bug，或者用户反馈的 Bug）。基于 Master 创建，一般命名为 hotfix/v1.0.0，测试通过后合并到 Master 分支和 Develop 分支。</p><h2 id="Git-Flow-工具"><a href="#Git-Flow-工具" class="headerlink" title="Git Flow 工具"></a>Git Flow 工具</h2><p>一旦使用 Git Flow 模型，那么对分支的操作必然是频繁且重复的，这个时候可通过 <a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">Git flow script 工具</a>来简单化复杂的 Git 命令。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># OS X</span><br><span class="line">brew install git-flow</span><br><span class="line"></span><br><span class="line"># Linux</span><br><span class="line">apt-get install git-flow</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br><span class="line"># Windows 上或者</span><br><span class="line">curl -L -O https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh</span><br><span class="line">bash gitflow-installer.sh</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git flow help          # 查看帮助</span><br><span class="line">git flow feature help  # 查看 feature 帮助</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># init</span><br><span class="line">git flow init                           # 初始化。会询问分支的命名，初始化完成后自动切换到了 develop 分支。支持 -f -d 参数</span><br><span class="line"></span><br><span class="line"># feature</span><br><span class="line">git flow feature start MYFEATURE        # 开始一个 feature。相当于 git checkout -b feature/MYFEATURE</span><br><span class="line">git flow feature publish MYFEATURE      # publish 一个 feature。相当于 git push</span><br><span class="line">git flow feature pull origin MYFEATURE  # 获取 publish 的 feature</span><br><span class="line">git flow feature finish MYFEATURE       # 完成一个 feature。该命令将 feature 分支合并入 develop 分支，并切换到 develop 删除 feature</span><br><span class="line"></span><br><span class="line"># release</span><br><span class="line">git flow release start MYRELEASE        # 开始一个 release。git flow release start v1.0.0，分支全称是 release/v1.0.0</span><br><span class="line">git flow release publish MYRELEASE      # publish 一个 release</span><br><span class="line">git flow release finish MYRELEASE       # 发布一个 release。该命令将 release 合并入 master 和 develop 并切换到 master，删除该 release，创建 tag</span><br><span class="line"></span><br><span class="line"># hotfix</span><br><span class="line">git flow hotfix start MYVERSION         # 开始一个 hotfix</span><br><span class="line">git flow hotfix finish MYVERSION        # 发布一个 hotfix</span><br></pre></td></tr></table></figure><p><code>git flow init</code> 会询问分支的命名，发布和预发布这两个分支名称采用默认的 master 和 develop 即可，而其他的分支需要填写前缀，比如 <code>feature/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br><span class="line"></span><br><span class="line">Initialized empty Git repository in /Users/tracy-xu/Desktop/test/.git/</span><br><span class="line">No branches exist yet. Base branches must be created now.</span><br><span class="line">Branch name for production releases: [master] </span><br><span class="line">Branch name for &quot;next release&quot; development: [develop] </span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/] </span><br><span class="line">Release branches? [release/] </span><br><span class="line">Hotfix branches? [hotfix/] </span><br><span class="line">Support branches? [support/] </span><br><span class="line">Version tag prefix? [] version/</span><br></pre></td></tr></table></figure><p>注：Release 和 Hotfix 命令使用和 Feature 一样，只是有些细微区别，比如 <code>git flow release finish</code> 命令将会将 Release 分支合并入 Master 和 Develop 两个分支，且会打上版本号（tag 需要有 message，要不然会创建失败）。</p><p><img src="/images/project/git/git-flow-commands.png" alt="git-flow-commands"></p><p>附：<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">Git-Flow 备忘清单</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit Message Style Guide</title>
      <link href="/2019/04/20/Git-Commit-Message-Style-Guide/"/>
      <url>/2019/04/20/Git-Commit-Message-Style-Guide/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>在 Git 中，我们使用 <code>git commit -m &quot;xxx&quot;</code> 来提交代码，参数 <code>-m</code> 用来指定 Commit Message（提交说明），直接执行 <code>git commit</code> 会进入编辑器模式，可提交多行说明。Commit Message 应规范化，规范化的 Commit Message 能带来很多好处：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 提交说明明确，方便快速浏览和查找，比如 git log --pretty=format:%s, git log HEAD --grep feature</span><br><span class="line">* 可以直接从 Commit Message 生成 Change Log</span><br></pre></td></tr></table></figure><p>目前，社区中有很多 Commit Message 规范，本文介绍 Angular Commit Message 规范，因其合理、系统，且有配套工具，在社区中得到来广泛的应用。</p><h2 id="Angular-Commit-Message-规范"><a href="#Angular-Commit-Message-规范" class="headerlink" title="Angular Commit Message 规范"></a>Angular Commit Message 规范</h2><p><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">Angular commit message guidelines</a> 中将 Commit message 分为三个部分：Header，Body 和 Footer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略。<code>&lt;BLANK LINE&gt;</code> 指空行，各个部分必须由空行分割。为了避免自动换行影响美观，不管是哪一个部分，任何一行都不得超过 72 个字符（或 100 个字符）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docs(changelog): update changelog to beta.5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fix(ivy): prevent templateOverrides from causing infinite loop (#29402)</span><br><span class="line"></span><br><span class="line">Previously, the transitive scope calculation could lead into re-compiling</span><br><span class="line">the same module multiple times. This fix ensures we cannot get into this loop.</span><br><span class="line">It should be fixed more completely (e.g. more cases) once FW-1178 is resolved.</span><br><span class="line"></span><br><span class="line">PR Close #29402</span><br></pre></td></tr></table></figure><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）。</p><ul><li>type</li></ul><p>type 用于说明 Commit 的类别，只允许使用下面 9 个标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* build      # 构建过程或辅助工具的变动。影响构建系统或外部依赖关系的更改（比如：Gulp、Broccoli、NPM）</span><br><span class="line">* ci         # 配置文件（对 CI 配置文件和脚本的更改，比如：Travis、Circle、BrowserStack、SauceLabs）</span><br><span class="line">* docs       # 文档（Documentation，比如 Readme、Changelog、Contribute 等等）</span><br><span class="line">* feat       # 新功能（Feature）</span><br><span class="line">* fix        # 修复 Bug</span><br><span class="line">* prerf      # 性能（提高性能的代码更改，比如，提升性能、体验）</span><br><span class="line">* refactor   # 重构（即不是新增功能，也不是修改 bug 的代码变动）</span><br><span class="line">* style      # 格式（不影响代码运行的变动，比如：空白、换行、分号等）</span><br><span class="line">* test       # 测试（增加测试或更正现有测试）</span><br><span class="line">* revert     # 回滚（回滚到某一个版本，带上版本号）</span><br></pre></td></tr></table></figure><p>如果 type 为 feat 和 fix，则该 Commit 将肯定出现在 Change Log 之中。其他情况（docs、chore、style、refactor、test）建议不要放入 Change Log。</p><ul><li>scope</li></ul><p>scope 用于说明 Commit 影响的范围，比如框架中的数据层、控制层、视图层，或业务中某个业务模块，视具体项目的不同而不同，比如：user 用户、pay 支付、product 产品、article 文章、core 核心、router 路由、api 接口、doc 文档…</p><ul><li>subject</li></ul><p>subject 是 Commit 目的的简短描述，不超过 50 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</span><br><span class="line">* 第一个字母小写</span><br><span class="line">* 结尾不加句号（.）</span><br></pre></td></tr></table></figure><p>常用表述语有：add、change、update、remove、delete。</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Body 部分是对本次 Commit 的详细描述，可以分成多行。有两个注意点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 使用第一人称现在时，比如使用 change 而不是 changed 或 changes</span><br><span class="line">* 应该说明代码变动的动机，以及与以前行为的对比</span><br></pre></td></tr></table></figure><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>Footer 部分只用于两种情况。</p><ul><li>不兼容变动</li></ul><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>关闭 Issue 或 Pull requests</li></ul><p>在开源的项目中，如果当前 commit 针对某个 issue 或 pr，那么可以在 Footer 部分关闭这个 issue 或 pr。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fixes #21388</span><br><span class="line">PR Closes #234</span><br></pre></td></tr></table></figure><p>常用的表述语有 sclose、fix、resolve。</p><h3 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h3><p>还有一种特殊情况，如果当前 Commit 用于撤销以前的 Commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure><p>Body 部分的格式是固定的，必须写成 This reverts commit<hash>.，其中的 Hash 是被撤销 Commit 的 SHA 标识符。</hash></p><p>如果当前 Commit 与被撤销的 Commit 在同一个发布（Release）里面，那么它们都不会出现在 Change Log 里面。如果两者在不同的发布，那么当前 Commit，会出现在 Change Log 的 Reverts 小标题下面。</p><h2 id="设置-Commit-Message-Template"><a href="#设置-Commit-Message-Template" class="headerlink" title="设置 Commit Message Template"></a>设置 Commit Message Template</h2><p>通过设置全局 .gitconfig 来指定 Commit Message 模板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global commit.template /d/commit-template</span><br></pre></td></tr></table></figure><p>TortoiseGit 中可通过依次点击 <code>settings -&gt; Git -&gt; Edit global .gitconfig</code>，然后编辑这个全局 .gitconfig 文件，在其末尾加入 commit 字段配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    email = xxxxxx@qq.com</span><br><span class="line">    name = Tracy</span><br><span class="line">[winUpdater]</span><br><span class="line">    recentlySeenVersion = 2.17.0.windows.1</span><br><span class="line">[credential]</span><br><span class="line">    helper = manager</span><br><span class="line">[commit]</span><br><span class="line">  template = d:/commit-template</span><br></pre></td></tr></table></figure><h2 id="生成-Change-Log"><a href="#生成-Change-Log" class="headerlink" title="生成 Change Log"></a>生成 Change Log</h2><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档。如果所有 Commit Message 都符合 Angular Commit Message 规范，那么发布新版本时，可以用 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 这个工具自动生成 <a href="https://github.com/angular/angular/blob/master/CHANGELOG.md" target="_blank" rel="noopener">CHANGELOG.md</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g conventional-changelog-cli</span><br><span class="line">cd my-project</span><br><span class="line">conventional-changelog-cli -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure><p>上面命令不会覆盖以前的 Change Log，只会在 CHANGELOG.md 的头部加上自从上次发布以来的变动。如果想要生成所有发布的 Change Log，要运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conventional-changelog-cli -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure><p>为了方便使用，可以将其写入 package.json 的 scripts 字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;changelog&quot;: &quot;conventional-changelog-cli -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，直接运行下面的命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run changelog</span><br></pre></td></tr></table></figure><p>生成的文档包括以下三个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* New features</span><br><span class="line">* Bug fixes</span><br><span class="line">* Breaking changes.</span><br></pre></td></tr></table></figure><p>每个部分都会罗列相关的 Commit ，并且有指向这些 Commit 的链接。当然，生成的文档允许手动修改，所以发布前，还可以添加其他内容。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>西溪湿地半日游</title>
      <link href="/2019/04/06/xxsd/"/>
      <url>/2019/04/06/xxsd/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p><img src="/images/essay/482317088.jpg" alt="西西湿地"><br>[图 1] 慢生活街区店前花圃 1</p><a id="more"></a><p><img src="/images/essay/2090297738.jpg" alt="蒋村集市"><br>[图 2] 慢生活街区店前花圃 2</p><p><img src="/images/essay/1024445398.jpg" alt="洪园渔人码头"><br>[图 3] 洪园渔人码头</p><p><img src="/images/essay/1131758639.jpg" alt="西西湿地"><br>[图 4] 西溪花园翠竹苑</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录 Date 中的两个坑</title>
      <link href="/2019/04/01/Javascript-Date-Something/"/>
      <url>/2019/04/01/Javascript-Date-Something/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><h2 id="new-Date-参数-dataString-格式问题"><a href="#new-Date-参数-dataString-格式问题" class="headerlink" title="new Date 参数 dataString 格式问题"></a>new Date 参数 dataString 格式问题</h2><p>new Date(dataString) 中，参数 dataString 必须符合 ISO 8601 标准或者 RFC 2822 标准，现代主流浏览器这两个标准都支持（IE8 只支持 RFC 2822，不支持 ISO 8601）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new Date(&apos;2019-01-25T09:14:10.099+00:00&apos;).getTime();    // ISO 8601 标准。返回 1548407650099</span><br><span class="line">new Date(&apos;2019/01/25 09:14:10+0000&apos;).getTime();         // RFC 2822 标准。返回 1548407650000</span><br></pre></td></tr></table></figure><p>然而，在实际工作中，后台（Java）返回的是格式既不是标准的 ISO 8601 也不是标准的 RFC 2822 格式，而是 ISO 8601 和 RFC 2822 混合格式，时区使用的是 RFC 2822 格式，比如，2019-01-25T09:14:10.099+0000，这个格式只有 Chrome 支持，其他浏览器都不支持（比如 iOS WebView、IE），执行 getTime 操作会返回 NaN：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Date(&apos;2019-01-25T09:14:10.099+0000&apos;).getTime();     // NaN</span><br></pre></td></tr></table></figure><a id="more"></a><p>对于这个问题，要么要求后端返回标准的日期字符串格式，要么前端将数据纠正（moment、data-fns 就做了处理）。</p><h2 id="setDate-的副作用"><a href="#setDate-的副作用" class="headerlink" title="setDate 的副作用"></a>setDate 的副作用</h2><p>setDate 参数如果超出了月份的合理范围，会向上个月或下个月设置，&lt;= 0 时，会设置上个月的日期，0 是最后一天，-1 是倒数第二天，以此类推，超出范围的正整数同理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setDate(0);</span><br><span class="line">d;                            // 2 月 28</span><br></pre></td></tr></table></figure><p>我们可以利用这个特性来获取月份的天数和判断是否是闰年：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 获取月份天数</span><br><span class="line">function getMonthDayCount(year, month) &#123;</span><br><span class="line">  return new Date(year, month, 0).getDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMonthDayCount(2017, 10);   // 31</span><br><span class="line"></span><br><span class="line">// 获取一年中所有月份天数</span><br><span class="line">function getAllMonthDayCount(year) &#123;</span><br><span class="line">  var days = [31, new Date(year, 2, 0).getDate(), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];</span><br><span class="line">  return days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAllMonthDayCount(2016);    // [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 是否是闰年</span><br><span class="line">function isLeapYear(year) &#123;</span><br><span class="line">  return (year % 4 == 0) &amp;&amp; (year % 100 != 0 || year % 400 == 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这样是不是更容易理解</span><br><span class="line">function isLeapYear(year) &#123;</span><br><span class="line">  return new Date(year, 2, 0).getDate() === 29;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isLeapYear(2000);             // true</span><br></pre></td></tr></table></figure><ul><li>副作用</li></ul><p>但是，当在同一个 Date 对象上连续执行 setDate 操作时，不单单会偏移日期，还会连续偏移月份，这会影响后面的计算，导致结果出错。在实现 Calender 组件时发现这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">d.setDate(0);</span><br><span class="line">d;                    // 2 月 28</span><br><span class="line"></span><br><span class="line">d.setDate(-1);</span><br><span class="line">d;                    // 理想希望返回 2 月 27，但是返回的是 1 月 30</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两个像素三个视口 -- 像素</title>
      <link href="/2016/06/10/Pixel/"/>
      <url>/2016/06/10/Pixel/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>像素是影像显示的基本单位，其表现为一个个小方格。在 GUI 客户端软件（Web、Native）开发中，像素是布局的基础，对于一个客户端开发者来说理解它很重要。其实存在两种像素，<a href="https://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html" target="_blank" rel="noopener">此像素非彼像素</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 设备像素</span><br><span class="line">* 设备独立像素</span><br></pre></td></tr></table></figure><a id="more"></a><p>UI 眼中的像素是设备像素，因为要考虑设计稿中非矢量元素（图片）在程序适配中的高保真，程序员眼中的像素是设备独立像素（Web 的 px，Android 的 dp，IOS 的 pt），因为要考虑适配。PC 时代的标准屏幕中，这两个像素是相等的，我们意识不到这个问题的存在，但是在高密度屏时代就需要面对它了。</p><h2 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h2><p>设备像素（Device Pixels）又叫物理像素（Physical Pixel），一个设备像素是屏幕上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。跟设备像素相关概念有分辨率、屏幕尺寸、像素密度，这些参数在屏幕出厂时就固定下来了。以 iPhone5 屏幕参数为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 屏幕分辨率 -- 1136 x 640</span><br><span class="line">* 屏幕尺寸 -- 4 英寸</span><br><span class="line">* 屏幕像素密度/解析度 -- 326dpi。</span><br></pre></td></tr></table></figure><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>分辨率可以细分为屏幕分辨率（显示分辨率）、图像分辨率、视频分辨率。其中，屏幕分辨率指一个屏幕具体由多少个像素点组成。<code>1136 x 640</code> 的屏幕分辨率指的是屏幕上垂直有 1136 个物理像素，水平有 640 个物理像素。常见分辨率中 4:3 有 <code>1024 x 768</code>、16:9 有 <code>1366 × 768</code>、<code>1920 × 1080</code>、<code>2560 x 1440</code>、<code>3860 × 2160</code>, 16:10 有 <code>1920 x 1200</code>。</p><p>也可以用 K 和 P 来描述分辨率，P 代表纵向的像素个数，K 代表横向有几个 1024 个像素。分辨率为 <code>1920 x 1080</code> 的屏幕就属于 1080P 屏幕（也被称为 FHD 全高清屏幕），一般来讲横向像素超过 2048 的屏幕就属于 2K 屏，横向像素超过 4096 的屏幕就属于 4K 屏。</p><p>分辨率高不代表就清晰，这还与尺寸有关，同一尺寸下分辨率越高，就越清晰。</p><h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><p>屏幕尺寸指的是屏幕对角线的物理长度，单位英寸，比如 iPhone 5 4 英寸，MBP 13.3 英寸。</p><h3 id="像素密度"><a href="#像素密度" class="headerlink" title="像素密度"></a>像素密度</h3><p>像素密度 (Pixels Per Inch) 指的是每英寸所拥有的像素数量，可用于描述屏幕的清晰度或图片的质量，单位是 ppi。理论上 PPI 越高，单位面积的像素数量就越多，画面会更细腻丰富清晰。屏幕的 PPI 可以通过屏幕分辨率和尺寸计算得到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PPI = Math.sqrt(a ** 2 + b ** 2) / 4</span><br></pre></td></tr></table></figure><p>在桌面屏幕中，大部分的 PC 显示器和笔记本屏幕都还是普通密度的 PPI，不过像 Retina MBP（Apple 在 2012 年发布了第一款 Retina MBP）、2k 和 4k 这样一些高密度屏也很常见。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 14 英寸笔记本（112ppi）</span><br><span class="line">Math.sqrt(1366 ** 2 + 768 ** 2) / 14;</span><br><span class="line">// 14 英寸笔记本（157ppi）</span><br><span class="line">Math.sqrt(1920 ** 2 + 1080 ** 2) / 14;</span><br><span class="line">// 13.3 英寸 MBA (127ppi)</span><br><span class="line">Math.sqrt(1440 ** 2 + 900 ** 2) / 13.3;</span><br><span class="line">// 23.8 英寸 PC 显示器（92ppi）</span><br><span class="line">Math.sqrt(1920 ** 2 + 1080 ** 2) / 23.8;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 13.3 英寸 MBP/Retina MBA (226ppi)</span><br><span class="line">Math.sqrt(2560 ** 2 + 1600 ** 2) / 13.3;</span><br><span class="line">// 15.6 英寸 4K XPS (290ppi)</span><br><span class="line">Math.sqrt(3840 ** 2 + 2400 ** 2) / 15.6;</span><br><span class="line">// 13.5 英寸 Surface Book 3 (267ppi)</span><br><span class="line">Math.sqrt(2256 ** 2 + 1504 ** 2) / 13.3;</span><br><span class="line">// 15.6 英寸 4K ThinkPad P1 (282ppi)</span><br><span class="line">Math.sqrt(3840 ** 2 + 2160 ** 2) / 15.6;</span><br></pre></td></tr></table></figure><p>在手机屏幕中，2010 年之前的手机分辨率都普遍低，比如，iPhone 3GS、诺基亚 5230、5800，随着智能手机发展，iPhone4 使得智能手机进入了高分辨率时代，发布会上首次提出了 Retina Display (视网膜显示屏) 的概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// iPhone 3GS (164ppi)</span><br><span class="line">Math.sqrt(320 ** 2 + 480 ** 2) / 3.5;</span><br><span class="line">// 诺基亚 5230、5800 (223ppi)</span><br><span class="line">Math.sqrt(320 ** 2 + 640 ** 2) / 3.2;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// iPhone 4 (329ppi)</span><br><span class="line">Math.sqrt(640 ** 2 + 960 ** 2) / 3.5;</span><br><span class="line">// iPhone 11 (326ppi)</span><br><span class="line">Math.sqrt(828 ** 2 + 1792 ** 2) / 6.1;</span><br><span class="line">// 小米 10 (386ppi)</span><br><span class="line">Math.sqrt(1080 ** 2 + 2340 ** 2) / 6.67;</span><br><span class="line">// 华为 P40 Pro (440ppi)</span><br><span class="line">Math.sqrt(1200 ** 2 + 2640 ** 2) / 6.58;</span><br><span class="line">// 三星 Galaxy S20 (565ppi)</span><br><span class="line">Math.sqrt(1440 ** 2 + 3200 ** 2) / 6.2;</span><br></pre></td></tr></table></figure><p>高密度屏是将更多的物理像素压缩进屏幕中的屏幕</p><p><a href="https://support.apple.com/en-us/HT202471" target="_blank" rel="noopener">Retina Display</a> 是一种屏幕显示效果，指的是正常的观看距离内人睛不能分辨出单独像素的显示效果。</p><p>iPhone4 发布会上，乔布斯表示，当手持设备距人眼 10－12 英寸时，300ppi 是人类视力的极限，当像素密度超过 300ppi 时，人眼就无法区分出单独的像素，因此像素密度达到 329ppi 的 iPhone 4 具备非常优秀的显示功能，不会再出现颗粒感。Apple 在发布 The New iPad 时候更是对 Retina Display 给出了科学意义上的解释。</p><p><img src="/images/css/retina2.jpg" alt="retina display"></p><p>根据<a href="https://www.engadget.com/2012-03-01-retina-display-macs-ipads-and-hidpi-doing-the-math.html" target="_blank" rel="noopener">上图</a>中视觉成像原理，能够非常容易得出下面这个三角函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tan(α/2) = h/2d</span><br><span class="line"></span><br><span class="line"># 变形公式</span><br><span class="line">α = 2tan^(-1)(h/2d) = 2arctan(h/2d)</span><br><span class="line">h = tan(α/2)*2d</span><br></pre></td></tr></table></figure><p>其中“α”代表视角，“d”代表视距，“h”代表像素间距（或一个像素的尺寸，要想看不出像素点，看不出像素间距即可）。在对人类视力研究中发现（斯内伦测试 Snellen Test），正常人眼能辨识所视物的最小视角（视敏度 <a href="https://baike.baidu.com/item/%E8%A7%86%E6%95%8F%E5%BA%A6" target="_blank" rel="noopener">visual acuity</a>）是 1/60 度（1 弧分度）。1 弧分度数据主要基于斯内伦视力表中 20/20 标准视力（等效于我国视力表中的 1.0）的统计样本，视力超常的（如 2.0 视力）个体无疑会有着更出色的视觉能力，能辨识所视物的最小视角会更小。</p><p>当 <code>α = 1/60</code> 时，即为 Retina Display。</p><p>是否是 Retina Display 这取决于 d (视距) 和 h (像素间距)。在 d 已知的情况下，取决于 h（Retina Display 并不等价于高 ppi，只是因为在移动设备“近视距”的的使用习惯中，只有当 ppi 非常高时才能达到 Retina Display，所以 Apple 在其营销术语中将这种符合 Retina Display 的高密度屏称为 Retina 屏），在 h 已知的情况下，取决于 d（也就是说，任何显示器在一定的视距之后都会是 Retina Display）。</p><p>在 10inch 的视距（手机的 Retina 视距）下要想达到 Retina Display 的显示效果，需要 343ppi，视距越小计算出的 ppi 越大，反之越小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">angle2rad</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> h = <span class="built_in">Math</span>.tan(angle2rad(<span class="number">1</span> / (<span class="number">2</span> * <span class="number">60</span>))) * <span class="number">2</span> * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ppi = <span class="number">1</span> / h;  <span class="comment">// 343</span></span><br></pre></td></tr></table></figure><p>在安卓手机中，没有 Retina 的叫法，屏幕根据 ppi 来划分为不同的等级。ppi 在 120 - 160 之间的手机被归为低密度手机，160 - 240 被归为中密度（medium），240 - 320 被归为高密度（high），320 - 480 以上被归为超高密度，480 - 640 被归为超超高密度，640 以上被称为超超超高密度。</p><table><thead><tr><th></th><th>ldpi</th><th>mdpi</th><th>hdpi</th><th>xhdpi</th><th>xxhdpi</th><th>xxxhdpi</th></tr></thead><tbody><tr><td>密度分界</td><td>120</td><td>160</td><td>240</td><td>320</td><td>480</td><td>640</td></tr><tr><td>常见屏幕分辨率</td><td>240 * 320</td><td>320 * 480</td><td>480 * 850</td><td>640 * 960</td><td>1080 * 1920</td><td>1440 * 2560</td></tr><tr><td>默认缩放比例</td><td>0.75</td><td>1.0</td><td>1.5</td><td>2.0</td><td>3</td><td>4</td></tr></tbody></table><p>附：点密度 DPI (Dots Per Inch) 指的是每英寸包括的点数。这里的点是一个抽象的单位，它可以是屏幕像素点，图片像素点也可以是打印机的墨点，当 DPI 来描述图片和屏幕时，等价于 PPI，描述打印机时，表示打印机每英寸可以打印的点数，打印机的 DPI 越高，打印图像的精细程度就越高，同时这也会消耗更多的墨点和时间。另外，PPI/DPI 有时候也被称为分辨率，比如，打印分辨率、扫描分辨率。</p><h2 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h2><p>为什么不能将设备像素作为设备独立像素？</p><p>设备独立像素（Density-Independent Pixel）又叫逻辑像素、密度无关像素，简称为 dips，单位为 dp，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素，然后由相关系统按设备像素比转换为物理像素在屏幕上显示出来。Web 的 px、Android 的 dp、IOS 的 pt，都是对 dp 的实现，<code>1px = 1dp = 1pt</code>。</p><h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><p>在缩放程度为 100%，某一方向上（x 轴或 y 轴）物理像素和设备独立像素的比例叫做“设备像素比” (device pixel ratio)，单位 dpr。设备像素比定义了设备独立像素和设备像素的转换关系，决定了 GUI 软件的渲染尺寸，当处理标准显示器与 HiDPI 或 Rerina 显示器之间的差异时，这很有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设备像素比 = 物理像素 / 设备独立像素</span><br></pre></td></tr></table></figure><p>在 JS 中 <code>window.devicePixelRatio</code> 得到，在 CSS 中，可以通过 <code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code> 和 <code>-webkit-max-device-pixel-ratio</code> 进行媒体查询。</p><p>设备独立像素和设备像素间的转换由两个条件决定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 页面是否缩放</span><br><span class="line">* 设备像素比（屏幕是否为高密度或超高密度)</span><br></pre></td></tr></table></figure><p>页面放大，设备独立像素会跨越了更多的设备像素，缩小则相反。在排除页面缩放的情况下，他们的换算关系取决于设备像素比。比如，在 2dpr 的设备上，<code>1 个设备独立像素 = 4 个设备像素</code>，CSS 中的 <code>{width: 200px}</code> 需要由 800 个物理像素来显示（面积）。</p><p>在已知 dpr 和 ppi 的情况下，还可以将 dp 转为现实生活中的物理单位，比如, 在 2dpr、326ppi 下，<code>200dp = 400px = 1.23inch (400 / 326)</code>，于是 <code>1dp = 0.00615inch</code>。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两个像素三个视口 -- 视口</title>
      <link href="/2016/06/10/Viewport/"/>
      <url>/2016/06/10/Viewport/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>视口（viewport）代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI（菜单栏等）。一般我们所说的视口共包括三种：布局视口、视觉视口和理想视口，它们在屏幕适配中起着非常重要的作用。</p><a id="more"></a><h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><p>桌面浏览器中，视口的宽度与浏览器窗口的宽度一致，浏览器窗口就是约束 CSS 布局的视口，它是所有 CSS 百分比宽度推算的根源，给 CSS 布局限制了一个最大宽度（超出部分将出现滚动条）。但是在移动端，情况就很复杂了。</p><p>在移动设备上，视口与屏幕宽度不再相关联，是完全独立的，浏览器厂商为了让传统的 PC 网页能够尽可能在移动设备上更多的展示，会把视口的宽度设置地很大（一般在 768px ~ 1024px 之间，Apple 是 980px），并且将其缩放在了屏幕内。这个浏览器厂商定义的视口被称为“布局视口（Layout Viewport）”，网页的最大宽度是默认的 Layout Viewport 宽度，超出部分会出现滚动条。</p><p><img src="/images/css/layout-viewport.png" alt="layout viewport"></p><p>可通过 Meta Viewport 来设置布局视口，能设置的属性如下所示。</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td>正整数或 device-width</td><td>定义视口的宽度，单位为像素</td></tr><tr><td>height</td><td>正整数或 device-height</td><td>定义视口的高度，单位为像素</td></tr><tr><td>initial-scale</td><td>[0.0-10.0]</td><td>定义初始缩放值</td></tr><tr><td>minimum-scale</td><td>[0.0-10.0]</td><td>定义缩小最小比例，它必须小于或等于 maximum-scale 设置</td></tr><tr><td>maximum-scale</td><td>[0.0-10.0]</td><td>定义放大最大比例，它必须大于或等于 minimum-scale 设置</td></tr><tr><td>user-scalable</td><td>yes/no</td><td>定义是否允许用户手动缩放页面，默认值 yes</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 中可通过 <code>document.documentElement.clientWidth / clientHeight</code> 获取布局视口的尺寸，CSS 中可设置 <code>html, body {width: 100%}</code>，通过测量 <code>body</code> 的宽度来验证默认布局视口大小。另外，CSS 中的媒体查询，查询的是布局视口的宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media (min-width: 700px) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h2><p>用户在屏幕上能看到的网页区域被称为“视觉视口（Visual Viewport）” 。</p><p>视觉视口用于承载布局视口，其大小是视觉视口内 CSS 像素的总量，受浏览器缩放影响。用户可以在视觉视口中拖动或者缩放网页，来获得良好的浏览效果，如果用户缩小网站，视觉视口内 CSS 像素数量增多，视觉视口变大，看到的网站区域将变大，同理用户放大网站，视觉视口内 CSS 像素数量减少，视觉视口也变小，能看到的网站区域将缩小。不管用户如何缩放，都不会影响到布局视口的宽度。</p><p><img src="/images/css/visual-viewport.png" alt="visual viewport"></p><p><code>window.innerWidth/innerHeight</code> 可以获取视觉视口的尺寸，大小是屏幕中 CSS 像素的数量。</p><h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><p>移动设备中默认 768px ~ 1024px 尺寸的布局视口对用户不友好，忽略了手机本身的尺寸，于是引入理想视口的概念。将布局视口的宽度设为屏幕的宽度，这样的布局视口被称为“理想视口（Idea Viewport）”。理想视口是移动设备上最佳的布局视口，理想视口下开发的页面不需要缩放就能够完美显示。</p><p>JS 中可通过 <code>screen.width/height</code> 获取理想视口的尺寸（有兼容性问题，可能返回的是设备像素尺寸）。将 Meta Viewport 设置如下就可以将布局视口设为理想视口了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实践中，还会设置缩放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 推荐的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0,viewport-fit=cover"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：<code>initial-scale</code>有一个隐藏的作用，它同时会将布局视口的尺寸设置为缩放后的尺寸，所以<code>initial-scale=1</code>与<code>width=device-width</code>的效果是一样的（不缩放又要求放进 Visual Layout 里，所以 <code>initial-scale=1</code> 与 <code>width=device-width</code> 等同）。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配方案之 VW + REM</title>
      <link href="/2016/06/10/VW-REM/"/>
      <url>/2016/06/10/VW-REM/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sun Aug 02 2020 06:41:55 GMT+0800 (GMT+08:00) --><p>在移动端开发中，我们曾使用过“流体布局”、“Viewport Scale”、“Media Query/JS + REM 流体”，等适配方案，但由于各种缺陷，这些适配方案都一一被淘汰。一个优秀的适配方案应做到以下两点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* UI 的精确还原与适配</span><br><span class="line">* 兼容第三方组件和跨端数据</span><br></pre></td></tr></table></figure><p>vw + rem 就是这样的一个方案。</p><a id="more"></a><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>vw + rem 下不用手动断点设置 html font-size，也不需要考虑 dpr，其原理是，html font-size 联动 rem（ html font-size value = 1 rem），屏幕联动 html font-size vw。</p><h3 id="定义规范"><a href="#定义规范" class="headerlink" title="定义规范"></a>定义规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 设计规范。规定设计稿分辨率，比如，Pad 选择 1920px，手机选择 750px</span><br><span class="line">* 基准值。规定屏幕分成 10 等分（100vw/10），html font-size 为 10vw，所以 1rem = 10vm</span><br></pre></td></tr></table></figure><p>将基准值的定义为 100vw/10 = 10vw，而不是 100px（除以 19.2、12.8），这仅仅是规范，10vw 体现适配原则，容易理解，而 100px 在没有转换工具的条件下，方便了口算。</p><p>在没有转换工具的情况下，为了方便口算，我们会将 html faont-size 定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: calc(100vw/19.2);   # 1920 的设计规范下还原的，base 为 1920px/19.2 = 100px，px 转 rem 除以 100 即可</span><br></pre></td></tr></table></figure><p>直接在源码里面进行转换不利于源码的维护，在现代前端开发中推荐使用工程化工具转换。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 步骤一：定义 html font-size 基准值（一般会定为 10vw）</span><br><span class="line">* 步骤二：开发页面。页面在设计尺寸下开发（比如，平板 1920、手机 750），开发单位为 px</span><br><span class="line">* 步骤三：px 转 rem。这一步请用工具完成，转换方法为 px/基准值（1920 设计规范下是 192，750 设计稿是 75），一般会忽略 border，因为可能变成 0px</span><br></pre></td></tr></table></figure><h3 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a>兼容处理</h3><p>vw 不支持 Android 4.4 以下设备，这时候就需要对 vw 做兼容处理了。这里不想通过 JS 来解决此问题，本着逐渐增强，平稳退化的原则，选一个默认分辨率处理，比如手机就选 750 的分辨率：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">37.5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">flexible</a> 就是手淘团队在 Android 4.4- 设备不支持 vw 时的一个 JS 解决方案。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
